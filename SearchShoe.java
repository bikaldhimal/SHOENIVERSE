
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ASUS
 */
public class SearchShoe extends javax.swing.JFrame {

    /**
     * Creates new form searchShoe
     */
    public SearchShoe() {
        initComponents();
    }
       
//    public SearchShoe(ArrayList<Shoes> shoeList) {
//        this.shoeList = shoeList;
//    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        homeSearch = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        searchShoe = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        backSearch = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        importButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shoeniverse");
        setBackground(new java.awt.Color(245, 245, 245));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(164, 196, 181));
        jPanel2.setMinimumSize(new java.awt.Dimension(1100, 720));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homeSearch.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        homeSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/home.png"))); // NOI18N
        homeSearch.setBorder(null);
        homeSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeSearch.setFocusable(false);
        homeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeSearchActionPerformed(evt);
            }
        });
        jPanel2.add(homeSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 22, 70, 50));

        searchField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        searchField.setForeground(new java.awt.Color(51, 51, 51));
        searchField.setText("Search");
        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFieldFocusLost(evt);
            }
        });
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        jPanel2.add(searchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 50, 320, 40));

        searchShoe.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N
        searchShoe.setForeground(new java.awt.Color(164, 196, 181));
        searchShoe.setText("SEARCH SHOE");
        searchShoe.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchShoe.setFocusable(false);
        searchShoe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchShoeActionPerformed(evt);
            }
        });
        jPanel2.add(searchShoe, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 50, 170, 37));

        searchTable.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        searchTable.setForeground(new java.awt.Color(51, 51, 51));
        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand", "Model", "Size", "Color", "Sex", "Quantity", "Price"
            }
        ));
        searchTable.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                searchTableHierarchyChanged(evt);
            }
        });
        jScrollPane1.setViewportView(searchTable);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 107, 980, 570));

        backSearch.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        backSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/back.png"))); // NOI18N
        backSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backSearch.setFocusable(false);
        backSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backSearchActionPerformed(evt);
            }
        });
        jPanel2.add(backSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 22, 70, 50));

        jComboBox1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(51, 51, 51));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brand", "Model", "Size", "Color", "Price" }));
        jComboBox1.setFocusable(false);
        jPanel2.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 180, 40));

        importButton.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N
        importButton.setForeground(new java.awt.Color(164, 196, 181));
        importButton.setText("IMPORT");
        importButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        importButton.setFocusable(false);
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        jPanel2.add(importButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 690, 120, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setSize(new java.awt.Dimension(1117, 797));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchTableHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_searchTableHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTableHierarchyChanged

    private void searchShoeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchShoeActionPerformed
        selectionSort(this.shoeList);
        search();
    }//GEN-LAST:event_searchShoeActionPerformed

    private void backSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backSearchActionPerformed
        this.dispose();
        new ShoeStoreInfo().setVisible(true);
    }//GEN-LAST:event_backSearchActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        
        readFile();
        importButton.setEnabled(false);
    }//GEN-LAST:event_importButtonActionPerformed

    private void searchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusGained
        if(searchField.getText().equalsIgnoreCase("Search")){
            searchField.setText("");
        }
    }//GEN-LAST:event_searchFieldFocusGained

    private void searchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusLost
        if(searchField.getText().equalsIgnoreCase("")){
            searchField.setText("Search");
        }
    }//GEN-LAST:event_searchFieldFocusLost

    private void homeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeSearchActionPerformed
        this.dispose();
        new MainPage().setVisible(true);
    }//GEN-LAST:event_homeSearchActionPerformed
    
    public void selectionSort(ArrayList<Shoes> shoeList) {
       int length = shoeList.size();
        for (int i = 0; i < length-1; i++)
        {
            int minIndex = i;
            for (int j = i + 1; j < length-1; j++)
            {
                if (((String)jComboBox1.getSelectedItem()).equalsIgnoreCase("Price")){
                    if (shoeList.get(j).getPrice() < shoeList.get(minIndex).getPrice()){
                        minIndex = j;
                    }
                }else if (((String)jComboBox1.getSelectedItem()).equalsIgnoreCase("Brand")){
                    if (shoeList.get(j).getBrand().compareTo(shoeList.get(minIndex).getBrand()) < 0){
                        minIndex = j;
                    }
                }else if (((String)jComboBox1.getSelectedItem()).equalsIgnoreCase("Model")){
                    if (shoeList.get(j).getModel().compareTo(shoeList.get(minIndex).getModel()) <0){
                        minIndex = j;
                    }
                }else if (((String)jComboBox1.getSelectedItem()).equalsIgnoreCase("Size")){
                    if (shoeList.get(j).getSize() < shoeList.get(minIndex).getSize()){
                        minIndex = j;
                    }
                }else if (((String)jComboBox1.getSelectedItem()).equalsIgnoreCase("Color")){
                    if (shoeList.get(j).getColor().compareTo(shoeList.get(minIndex).getColor()) <0 ){
                        minIndex = j;
                    }
                }
            }
            Shoes temp = shoeList.get(minIndex);
            shoeList.set(minIndex, shoeList.get(i));
            shoeList.set(i, temp);
        }
        DefaultTableModel tablemodule = (DefaultTableModel) searchTable.getModel();
        tablemodule.setRowCount(0);
        shoeList.forEach(shoe ->
        {
            String[] rowData =
            {
                shoe.getBrand(), shoe.getModel(), String.valueOf(shoe.getSize()),  shoe.getColor(),  shoe.getSex(), String.valueOf(shoe.getQuantity()), 
                 String.valueOf(shoe.getPrice())
            };
            tablemodule.addRow(rowData);
        });
    }
    
    public void search(){
        int theNumber = 0;
        String theString = "";
        String sortType = ((String) jComboBox1.getSelectedItem()).trim();
        
        if (sortType.equalsIgnoreCase("Price") || sortType.equalsIgnoreCase("Size")){
            theNumber = Integer.parseInt(searchField.getText().trim());
        }else if(sortType.equalsIgnoreCase("Model") || sortType.equalsIgnoreCase("Brand") || sortType.equalsIgnoreCase("Color") ) {
            theString = searchField.getText().trim();
        }
        // searching
        if(sortType.equalsIgnoreCase("Price")){
             // searching item with price
            priceBinarySearch(this.shoeList, 0, this.shoeList.size(), theNumber);
            }
        if(sortType.equalsIgnoreCase("Size")){
                   // searching item with size
                   int value = sizeBinarySearch(this.shoeList, 0, this.shoeList.size(), theNumber);
                   String writeStatement = "The available shoes for " + theNumber + " are;\n";
                   if (value == 1){
                        for (Shoes shoe: shoeList){
                            if(shoe.getSize()==theNumber){
                                writeStatement += "->" + shoe.getModel() + " of " + shoe.getBrand()+"\n";
                            }
                        }
                   }
                JOptionPane.showMessageDialog(this, writeStatement);
            }
        if(sortType.equalsIgnoreCase("Brand")){
                   // searching item with Brand
                   int value = brandBinarySearch(this.shoeList, 0, this.shoeList.size(), theString);
                   String writeStatement = "There are ";
                   if (value == 1){
                        for (Shoes shoe: shoeList){
                            if(shoe.getBrand().equalsIgnoreCase(theString)){
                                writeStatement += shoe.getModel() + ", ";
                            }
                        }
                   }
                JOptionPane.showMessageDialog(this, writeStatement + " model of shoes of " + theString);
            }
        if(sortType.equalsIgnoreCase("Model")){
                   // searching item with Model
                   int value = modelBinarySearch(this.shoeList, 0, this.shoeList.size(), theString);
                   String writeStatement = "The available shoes for " + theString + " are:\n";
                   if (value == 1){
                        for (Shoes shoe: shoeList){
                            if(shoe.getModel().equalsIgnoreCase(theString)){
                                writeStatement += shoe.getQuantity() + " pieces of "+shoe.getModel() + "\n";
                            }
                        }
                   }
                JOptionPane.showMessageDialog(this, writeStatement);
            }
        if(sortType.equalsIgnoreCase("Color")){
                   // searching item with Model
                   int value = colorBinarySearch(this.shoeList, 0, this.shoeList.size(), theString);
                   String writeStatement = "The available shoes for " + theString + " are:";
                   if (value == 1){
                        for (Shoes shoe: shoeList){
                            if(shoe.getColor().equalsIgnoreCase(theString)){
                                writeStatement += shoe.getModel() + " of " + shoe.getBrand()+"\n";
                            }
                        }
                   }
                JOptionPane.showMessageDialog(this, writeStatement);
            }
    }
    public void priceBinarySearch(ArrayList<Shoes> shoeList, int start, int end, int value){
        int middleIndex = shoeList.size()/2;
        if(shoeList.get(middleIndex).getPrice() == value){
            
        }else if(shoeList.get(middleIndex).getPrice() < value){
            end--;
            priceBinarySearch(shoeList, start, end, value);
        }else if(shoeList.get(middleIndex).getPrice() > value){
            start++;
            priceBinarySearch(shoeList, start, end, value);
        }else{
            JOptionPane.showMessageDialog(this, "There are no shoe for " + value);
           
        }
    }
    
    public int sizeBinarySearch(ArrayList<Shoes> shoeList, int start, int end, int value){
        int middleIndex = shoeList.size()/2;
        int returnValue =0;
        if(shoeList.get(middleIndex).getSize() == value){
            returnValue = 1;
        }else if(shoeList.get(middleIndex).getSize() < value){
            end--;
            sizeBinarySearch(shoeList, start, end, value);
        }else if(shoeList.get(middleIndex).getSize() > value){
            start++;
            sizeBinarySearch(shoeList, start, end, value);
        }else{
            JOptionPane.showMessageDialog(this, "There are no shoe of " + value + " size.");
            returnValue = -1;
        }
        return returnValue;
    }
    
    public int brandBinarySearch(ArrayList<Shoes> shoeList, int start, int end, String value){
        int middleIndex = shoeList.size()/2;
        int returnValue =0;
        if(shoeList.get(middleIndex).getBrand().equalsIgnoreCase(value)){
            returnValue = 1;
        }else if((shoeList.get(middleIndex).getBrand()).compareTo(value) < 0){
            end--;
            brandBinarySearch(shoeList, start, end, value);
        }else if(shoeList.get(middleIndex).getBrand().compareTo(value) > 0){
            start++;
            brandBinarySearch(shoeList, start, end, value);
        }else{
            JOptionPane.showMessageDialog(this, "There are no shoe of " + value);
            returnValue = -1;
        }
        return returnValue;
    }
    
    public int modelBinarySearch(ArrayList<Shoes> shoeList, int start, int end, String value){
        int middleIndex = shoeList.size()/2;
        int returnValue =0;
        if(shoeList.get(middleIndex).getModel().equalsIgnoreCase(value)){
            returnValue = 1;
        }else if((shoeList.get(middleIndex).getModel()).compareTo(value) < 0){
            end--;
            modelBinarySearch(shoeList, start, end, value);
        }else if(shoeList.get(middleIndex).getModel().compareTo(value) > 0){
            start++;
            modelBinarySearch(shoeList, start, end, value);
        }else{
            JOptionPane.showMessageDialog(this, "There are no shoe of " + value);
            returnValue = -1;
        }
        return returnValue;
    }
    
    public int colorBinarySearch(ArrayList<Shoes> shoeList, int start, int end, String value){
        int middleIndex = shoeList.size()/2;
        int returnValue =0;
        if(shoeList.get(middleIndex).getColor().equalsIgnoreCase(value)){
            returnValue = 1;
        }else if((shoeList.get(middleIndex).getColor()).compareTo(value) < 0){
            end--;
            colorBinarySearch(shoeList, start, end, value);
        }else if(shoeList.get(middleIndex).getColor().compareTo(value) > 0){
            start++;
            colorBinarySearch(shoeList, start, end, value);
        }else{
            JOptionPane.showMessageDialog(this, "There are no shoe of " + value);
            returnValue = -1;
        }
        return returnValue;
    }
    
    public void readFile(){
        try {
            BufferedReader bufferReader = new BufferedReader(new FileReader("File.csv"));
            
            String value = "";
            while((value = bufferReader.readLine())!=null){
            String[] values= value.split(",");
            DefaultTableModel tablemodule = (DefaultTableModel) searchTable.getModel();
            tablemodule.addRow(values);
            shoeList.add(new Shoes(values[0], values[1], Integer.parseInt(values[2]), values[3], values[4], Integer.parseInt(values[5]), Integer.parseInt(values[6])));
            }
        } catch (FileNotFoundException ex) {
           JOptionPane.showMessageDialog(this, "File not Found");
        }catch(IOException ex){
            JOptionPane.showMessageDialog(this, "IOException occured.");
        }
//        System.out.println(shoeList.size());
    }
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchShoe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchShoe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchShoe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchShoe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchShoe().setVisible(true);
            }
        });
    }

    ArrayList<Shoes> shoeList = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backSearch;
    private javax.swing.JButton homeSearch;
    private javax.swing.JButton importButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton searchShoe;
    private javax.swing.JTable searchTable;
    // End of variables declaration//GEN-END:variables
}
